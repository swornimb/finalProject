#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("final-project-backend:server");
var http = require("http");
var path = require("path");
var pdf = require("pdf-creator-node");
var fs = require("fs");

const {
  storeImage,
  storeTokenUriMetadata,
} = require("../controller/uploadToPinata");

const { pythonShellFunc } = require("../controller/pHash");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// server.listen(3000);

io = require("socket.io")(server);

io.on("connection", (client) => {
  client.on("upload-image", async (imageName, file) => {
    var fileName = imageName.replace(/^.*[\\\/]/, "");
    // fileName = "./image/" + imageName;
    client.emit("status", "Uploading data to IPFS....");
    var token = await handleTokenUri(fileName, file);
    client.emit("status", "Comparing image with other images....");
    var hashData = await pythonShellFunc(token[1].image);
    console.log(hashData);
    io.emit("data-collection", token[1].image, hashData);
  });

  client.on(
    "pdf-maker",
    async (photo, owner, imageString, similarPercentage) => {
      console.log(photo);
      console.log(imageString);
      var html = fs.readFileSync("./controller/template.html", "utf8");
      var options = {
        format: "A3",
        orientation: "portrait",
        border: "10mm",
        header: {
          height: "45mm",
          contents: "",
        },
        footer: {
          height: "28mm",
          contents: {
            first: "",
            2: "Second page", // Any page number is working. 1-based index
            default: "", // fallback value
            last: "",
          },
        },
      };
      var users = [
        {
          photoLink: photo,
          ownerAddress: owner,
          imageString: imageString,
          similarPercentage: similarPercentage,
        },
      ];
      var document = {
        html: html,
        data: {
          users: users,
        },
        path: "D:/Users/Swornim/Downloads/ImageUploadFail.pdf",
        type: "",
      };
      pdf
        .create(document, options)
        .then((res) => {
          console.log(res);
        })
        .catch((error) => {
          console.error(error);
        });
    }
  );
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

const metadataTemplate = {
  name: "",
  description: "",
  image: "",
  attributes: [{ trait_types: "photos", value: 100 }],
};

async function handleTokenUri(imageName, file) {
  const { response: imageUploadResponses, stream } = await storeImage(
    imageName,
    file
  );
  let tokenUriMetadata = { ...metadataTemplate };
  tokenUriMetadata.name = imageName;
  tokenUriMetadata.description = `An adorable ${tokenUriMetadata.name}`;
  tokenUriMetadata.image = `https://gateway.pinata.cloud/ipfs/${imageUploadResponses.IpfsHash}`;
  console.log(imageUploadResponses);
  console.log(`Uploading ${tokenUriMetadata.name}...`);
  const metadataUploadResponse = await storeTokenUriMetadata(tokenUriMetadata);
  const tokenUri = `https://gateway.pinata.cloud/ipfs/${metadataUploadResponse.IpfsHash}`;
  console.log("Token URIs uploaded! They are:");
  console.log(tokenUri);
  console.log(tokenUriMetadata.image);
  return [tokenUri, tokenUriMetadata];
}
